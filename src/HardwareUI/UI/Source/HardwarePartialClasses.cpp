/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

GacGen.exe MainWindow.xml

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#include "Hardware.h"
/* CodePack:BeginIgnore() */
#ifndef VCZH_DEBUG_NO_REFLECTION
/* CodePack:ConditionOff(VCZH_DEBUG_NO_REFLECTION, HardwareReflection.h) */
#include "HardwareReflection.h"
#endif
/* CodePack:EndIgnore() */

/* USER_CONTENT_BEGIN(Include) */
#include "..\..\framework.hpp"
#include "..\..\HardwareWrapper.h"
/* USER_CONTENT_END() */

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wparentheses-equality"
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#endif

#define GLOBAL_SYMBOL ::vl_workflow_global::Hardware::
#define GLOBAL_NAME ::vl_workflow_global::Hardware::Instance().
#define GLOBAL_OBJ &::vl_workflow_global::Hardware::Instance()

/***********************************************************************
Global Variables
***********************************************************************/

/* USER_CONTENT_BEGIN(Global Variables) */
namespace
{
	class DiskInternalProperty : public ::vl::Object, public ::vl::reflection::Description<DiskInternalProperty>
	{
	private:
		Hardware::HardwareWrapper::Disk::DiskQueryInfo __vwsn_prop_UpdateElements;
	public:
		decltype(auto) GetSelf()
		{
			return (__vwsn_prop_UpdateElements);
		}
		std::vector<std::string>& GetUpdateElements()
		{
			return __vwsn_prop_UpdateElements.UpdateElements;
		}
		std::vector<std::string>& GetElements()
		{
			return __vwsn_prop_UpdateElements.StaticElements;
		}
		::vl::vint GetId()
		{
			return __vwsn_prop_UpdateElements.DiskId;
		}
		explicit DiskInternalProperty(const Hardware::HardwareWrapper::Disk::DiskQueryInfo& info) :__vwsn_prop_UpdateElements(info) {}
	};
}
/* USER_CONTENT_END() */

BEGIN_GLOBAL_STORAGE_CLASS(vl_workflow_global_Hardware)
vl_workflow_global::Hardware instance;
INITIALIZE_GLOBAL_STORAGE_CLASS
FINALIZE_GLOBAL_STORAGE_CLASS
END_GLOBAL_STORAGE_CLASS(vl_workflow_global_Hardware)

namespace vl_workflow_global
{
	/***********************************************************************
	Global Functions
	***********************************************************************/

	Hardware& Hardware::Instance()
	{
		return Getvl_workflow_global_Hardware().instance;
	}

	/***********************************************************************
	Closures
	***********************************************************************/

	//-------------------------------------------------------------------

	__vwsnf1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::__vwsnf1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindowConstructor* __vwsnctorthis_0)
		:__vwsnthis_0(::vl::__vwsn::This(__vwsnctorthis_0))
	{
	}

	::vl::Ptr<::vl::reflection::description::IValueEnumerable> __vwsnf1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::operator()(const ::vl::reflection::description::Value& __vwsn_item_) const
	{
		auto nodeToBind = ::vl::__vwsn::Unbox<::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>>(__vwsn_item_);
		return ::vl::__vwsn::UnboxCollection<::vl::reflection::description::IValueEnumerable>(::vl::__vwsn::UnboxCollection<::vl::reflection::description::IValueList>(::vl::__vwsn::This(nodeToBind.Obj())->Children()));
	}

	//-------------------------------------------------------------------

	__vwsnf2_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::__vwsnf2_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindowConstructor* __vwsnctorthis_0)
		:__vwsnthis_0(::vl::__vwsn::This(__vwsnctorthis_0))
	{
	}

	::vl::Ptr<::vl::presentation::GuiImageData> __vwsnf2_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::operator()(const ::vl::reflection::description::Value& __vwsn_item_) const
	{
		auto nodeToBind = ::vl::__vwsn::Unbox<::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>>(__vwsn_item_);
		return ::vl::__vwsn::This(::vl::__vwsn::SharedPtrCast<::vl::presentation::controls::tree::TreeViewItem>(::vl::__vwsn::This(nodeToBind.Obj())->GetData().Obj()).Obj())->image;
	}

	//-------------------------------------------------------------------

	__vwsnf3_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::__vwsnf3_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindowConstructor* __vwsnctorthis_0)
		:__vwsnthis_0(::vl::__vwsn::This(__vwsnctorthis_0))
	{
	}

	::vl::WString __vwsnf3_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::operator()(const ::vl::reflection::description::Value& __vwsn_item_) const
	{
		auto nodeToBind = ::vl::__vwsn::Unbox<::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>>(__vwsn_item_);
		return ::vl::__vwsn::This(::vl::__vwsn::SharedPtrCast<::vl::presentation::controls::tree::TreeViewItem>(::vl::__vwsn::This(nodeToBind.Obj())->GetData().Obj()).Obj())->text;
	}

	//-------------------------------------------------------------------

	__vwsnf4_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::__vwsnf4_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindowConstructor* __vwsnctorthis_0)
		:__vwsnthis_0(::vl::__vwsn::This(__vwsnctorthis_0))
	{
	}

	::vl::WString __vwsnf4_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::operator()(const ::vl::reflection::description::Value& __vwsn_item_) const
	{
		auto itemToBind = ::vl::__vwsn::Unbox<::vl::Ptr<::Hardware::UI::TreeViewItemData>>(__vwsn_item_);
		return ::vl::__vwsn::This(itemToBind.Obj())->GetName();
	}

	//-------------------------------------------------------------------

	__vwsnf5_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::__vwsnf5_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindowConstructor* __vwsnctorthis_0)
		:__vwsnthis_0(::vl::__vwsn::This(__vwsnctorthis_0))
	{
	}

	::vl::WString __vwsnf5_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::operator()(const ::vl::reflection::description::Value& __vwsn_item_) const
	{
		auto itemToBind = ::vl::__vwsn::Unbox<::vl::Ptr<::Hardware::UI::TreeViewItemData>>(__vwsn_item_);
		return ::vl::__vwsn::This(itemToBind.Obj())->GetDesc();
	}

	//-------------------------------------------------------------------

	__vwsnf7_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::__vwsnf7_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindowConstructor* __vwsnctorthis_0)
		:__vwsnthis_0(::vl::__vwsn::This(__vwsnctorthis_0))
	{
	}

	void __vwsnf7_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::operator()(const ::vl::reflection::description::Value& __vwsn_value_) const
	{
		auto __vwsn_old_ = ::vl::__vwsn::This(__vwsnthis_0->self)->GetIcon();
		auto __vwsn_new_ = ::vl::__vwsn::Unbox<::vl::Ptr<::vl::presentation::GuiImageData>>(__vwsn_value_);
		if ((__vwsn_old_.Obj() == __vwsn_new_.Obj()))
		{
			return;
		}
		::vl::__vwsn::This(__vwsnthis_0->self)->SetIcon(__vwsn_new_);
	}

	//-------------------------------------------------------------------

	__vwsno6_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::__vwsno6_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindow* __vwsnctor___vwsn_this_, ::Hardware::MainWindowConstructor* __vwsnctorthis_0)
		:__vwsn_this_(__vwsnctor___vwsn_this_)
		, __vwsnthis_0(::vl::__vwsn::This(__vwsnctorthis_0))
	{
	}

	void __vwsno6_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_::operator()(::vl::presentation::compositions::GuiGraphicsComposition* __vwsno_1, ::vl::presentation::compositions::GuiEventArgs* __vwsno_2) const
	{
		return ::vl::__vwsn::This(__vwsn_this_)->TreeView_Selection_Changed(__vwsno_1, __vwsno_2);
	}

	//-------------------------------------------------------------------

	__vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription::__vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription(::Hardware::MainWindowConstructor* __vwsnctorthis_0)
		:__vwsnthis_0(::vl::__vwsn::This(__vwsnctorthis_0))
	{
		this->__vwsn_bind_cache_0 = static_cast<::Hardware::MainWindow*>(nullptr);
		this->__vwsn_bind_handler_0_0 = ::vl::Ptr<::vl::reflection::description::IEventHandler>();
		this->__vwsn_bind_opened_ = false;
		this->__vwsn_bind_closed_ = false;
	}

	void __vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription::__vwsn_bind_activator_()
	{
		auto __vwsn_bind_activator_result_ = ::vl::__vwsn::This(__vwsn_bind_cache_0)->GetCustomIcon();
		::vl::__vwsn::EventInvoke(this->ValueChanged)(::vl::__vwsn::Box(__vwsn_bind_activator_result_));
	}

	void __vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription::__vwsn_bind_callback_0_0()
	{
		this->__vwsn_bind_activator_();
	}

	bool __vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription::Open()
	{
		if ((!__vwsn_bind_opened_))
		{
			(__vwsn_bind_opened_ = true);
			(__vwsn_bind_cache_0 = [&]() { try { return __vwsnthis_0->self; } catch (...) { return static_cast<::Hardware::MainWindow*>(nullptr); } }());
			(__vwsn_bind_handler_0_0 = [&]() { try { return ::vl::__vwsn::EventAttach(::vl::__vwsn::This(__vwsn_bind_cache_0)->CustomIconChanged, ::vl::Func<void()>(this, &__vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription::__vwsn_bind_callback_0_0)); } catch (...) { return ::vl::Ptr<::vl::reflection::description::IEventHandler>(); } }());
			return true;
		}
		return false;
	}

	bool __vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription::Update()
	{
		if ((__vwsn_bind_opened_ && (!__vwsn_bind_closed_)))
		{
			this->__vwsn_bind_activator_();
			return true;
		}
		return false;
	}

	bool __vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription::Close()
	{
		if ((!__vwsn_bind_closed_))
		{
			(__vwsn_bind_closed_ = true);
			if (static_cast<bool>(__vwsn_bind_handler_0_0))
			{
				::vl::__vwsn::EventDetach(::vl::__vwsn::This(__vwsn_bind_cache_0)->CustomIconChanged, __vwsn_bind_handler_0_0);
				(__vwsn_bind_handler_0_0 = ::vl::Ptr<::vl::reflection::description::IEventHandler>());
			}
			(__vwsn_bind_cache_0 = static_cast<::Hardware::MainWindow*>(nullptr));
			(__vwsn_bind_handler_0_0 = ::vl::Ptr<::vl::reflection::description::IEventHandler>());
			return true;
		}
		return false;
	}
}

/***********************************************************************
Class (::Hardware::MainWindowConstructor)
***********************************************************************/

namespace Hardware
{
	void MainWindowConstructor::__vwsn_Hardware_MainWindow_Initialize(::Hardware::MainWindow* __vwsn_this_)
	{
		(this->self = __vwsn_this_);
		(this->__vwsn_precompile_8 = ::vl::__vwsn::This(this->self)->GetBoundsComposition());
		{
			::vl::__vwsn::This(this->__vwsn_precompile_8)->SetPreferredMinSize([&]() { ::vl::presentation::Size __vwsn_temp__; __vwsn_temp__.x = static_cast<::vl::vint>(640); __vwsn_temp__.y = static_cast<::vl::vint>(480); return __vwsn_temp__; }());
		}
		{
			::vl::__vwsn::This(this->self)->SetClientSize([&]() { ::vl::presentation::Size __vwsn_temp__; __vwsn_temp__.x = static_cast<::vl::vint>(640); __vwsn_temp__.y = static_cast<::vl::vint>(480); return __vwsn_temp__; }());
		}
		{
			::vl::__vwsn::This(this->self)->SetText(::vl::WString(L"Hardware", false));
		}
		(this->__vwsn_precompile_0 = new ::vl::presentation::compositions::GuiTableComposition());
		{
			::vl::__vwsn::This(this->__vwsn_precompile_0)->SetMinSizeLimitation(::vl::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation::LimitToElementAndChildren);
		}
		{
			::vl::__vwsn::This(this->__vwsn_precompile_0)->SetCellPadding(static_cast<::vl::vint>(5));
		}
		{
			::vl::__vwsn::This(this->__vwsn_precompile_0)->SetAlignmentToParent([&]() { ::vl::presentation::Margin __vwsn_temp__; __vwsn_temp__.left = static_cast<::vl::vint>(5); __vwsn_temp__.top = static_cast<::vl::vint>(5); __vwsn_temp__.right = static_cast<::vl::vint>(5); __vwsn_temp__.bottom = static_cast<::vl::vint>(5); return __vwsn_temp__; }());
		}
		{
			::vl::__vwsn::This(this->__vwsn_precompile_0)->SetRowsAndColumns(static_cast<::vl::vint>(1), static_cast<::vl::vint>(2));
			::vl::__vwsn::This(this->__vwsn_precompile_0)->SetRowOption(static_cast<::vl::vint>(0), [&]() { ::vl::presentation::compositions::GuiCellOption __vwsn_temp__; __vwsn_temp__.composeType = ::vl::presentation::compositions::GuiCellOption::ComposeType::Percentage; __vwsn_temp__.percentage = static_cast<double>(1.0); return __vwsn_temp__; }());
			::vl::__vwsn::This(this->__vwsn_precompile_0)->SetColumnOption(static_cast<::vl::vint>(0), [&]() { ::vl::presentation::compositions::GuiCellOption __vwsn_temp__; __vwsn_temp__.composeType = ::vl::presentation::compositions::GuiCellOption::ComposeType::Absolute; __vwsn_temp__.absolute = static_cast<::vl::vint>(150); return __vwsn_temp__; }());
			::vl::__vwsn::This(this->__vwsn_precompile_0)->SetColumnOption(static_cast<::vl::vint>(1), [&]() { ::vl::presentation::compositions::GuiCellOption __vwsn_temp__; __vwsn_temp__.composeType = ::vl::presentation::compositions::GuiCellOption::ComposeType::Percentage; __vwsn_temp__.percentage = static_cast<double>(1.0); return __vwsn_temp__; }());
		}
		(this->__vwsn_precompile_1 = new ::vl::presentation::compositions::GuiCellComposition());
		{
			::vl::__vwsn::This(this->__vwsn_precompile_1)->SetSite(static_cast<::vl::vint>(0), static_cast<::vl::vint>(0), static_cast<::vl::vint>(1), static_cast<::vl::vint>(1));
		}
		{
			(this->bindableTreeView = new ::vl::presentation::controls::GuiBindableTreeView(::vl::presentation::theme::ThemeName::TreeView));
		}
		{
			::vl::__vwsn::This(this->bindableTreeView)->SetChildrenProperty(LAMBDA(::vl_workflow_global::__vwsnf1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(this)));
		}
		{
			::vl::__vwsn::This(this->bindableTreeView)->SetImageProperty(LAMBDA(::vl_workflow_global::__vwsnf2_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(this)));
		}
		{
			::vl::__vwsn::This(this->bindableTreeView)->SetTextProperty(LAMBDA(::vl_workflow_global::__vwsnf3_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(this)));
		}
		(this->__vwsn_precompile_2 = ::vl::__vwsn::This(this->bindableTreeView)->GetBoundsComposition());
		{
			::vl::__vwsn::This(this->__vwsn_precompile_2)->SetAlignmentToParent([&]() { ::vl::presentation::Margin __vwsn_temp__; __vwsn_temp__.left = static_cast<::vl::vint>(0); __vwsn_temp__.top = static_cast<::vl::vint>(0); __vwsn_temp__.right = static_cast<::vl::vint>(0); __vwsn_temp__.bottom = static_cast<::vl::vint>(0); return __vwsn_temp__; }());
		}
		{
			::vl::__vwsn::This(this->bindableTreeView)->SetVerticalAlwaysVisible(false);
		}
		{
			::vl::__vwsn::This(this->bindableTreeView)->SetHorizontalAlwaysVisible(false);
		}
		{
			::vl::__vwsn::This(this->bindableTreeView)->SetAlt(::vl::WString(L"T", false));
		}
		{
			::vl::__vwsn::This(this->__vwsn_precompile_1)->AddChild(static_cast<::vl::presentation::compositions::GuiGraphicsComposition*>(::vl::__vwsn::This(this->bindableTreeView)->GetBoundsComposition()));
		}
		{
			::vl::__vwsn::This(this->__vwsn_precompile_0)->AddChild(static_cast<::vl::presentation::compositions::GuiGraphicsComposition*>(this->__vwsn_precompile_1));
		}
		(this->__vwsn_precompile_3 = new ::vl::presentation::compositions::GuiColumnSplitterComposition());
		{
			::vl::__vwsn::This(this->__vwsn_precompile_3)->SetColumnsToTheLeft(static_cast<::vl::vint>(1));
		}
		{
			::vl::__vwsn::This(this->__vwsn_precompile_0)->AddChild(static_cast<::vl::presentation::compositions::GuiGraphicsComposition*>(this->__vwsn_precompile_3));
		}
		(this->__vwsn_precompile_4 = new ::vl::presentation::compositions::GuiCellComposition());
		{
			::vl::__vwsn::This(this->__vwsn_precompile_4)->SetSite(static_cast<::vl::vint>(0), static_cast<::vl::vint>(1), static_cast<::vl::vint>(1), static_cast<::vl::vint>(1));
		}
		{
			(this->bindableListView = new ::vl::presentation::controls::GuiBindableListView(::vl::presentation::theme::ThemeName::ListView));
		}
		{
			auto __vwsn_collection_ = ::vl::__vwsn::UnboxCollection<::vl::reflection::description::IValueList>(::vl::__vwsn::This(this->bindableListView)->GetDataColumns());
			::vl::__vwsn::This(__vwsn_collection_.Obj())->Add(::vl::__vwsn::Box(static_cast<::vl::vint>(0)));
		}
		(this->__vwsn_precompile_7 = ::vl::__vwsn::This(this->bindableListView)->GetBoundsComposition());
		{
			::vl::__vwsn::This(this->__vwsn_precompile_7)->SetAlignmentToParent([&]() { ::vl::presentation::Margin __vwsn_temp__; __vwsn_temp__.left = static_cast<::vl::vint>(0); __vwsn_temp__.top = static_cast<::vl::vint>(0); __vwsn_temp__.right = static_cast<::vl::vint>(0); __vwsn_temp__.bottom = static_cast<::vl::vint>(0); return __vwsn_temp__; }());
		}
		{
			::vl::__vwsn::This(this->bindableListView)->SetVerticalAlwaysVisible(false);
		}
		{
			::vl::__vwsn::This(this->bindableListView)->SetHorizontalAlwaysVisible(false);
		}
		{
			::vl::__vwsn::This(this->bindableListView)->SetAlt(::vl::WString(L"L", false));
		}
		(this->__vwsn_precompile_5 = ::vl::Ptr<::vl::presentation::controls::list::ListViewColumn>(new ::vl::presentation::controls::list::ListViewColumn()));
		{
			::vl::__vwsn::This(this->__vwsn_precompile_5.Obj())->SetTextProperty(LAMBDA(::vl_workflow_global::__vwsnf4_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(this)));
		}
		{
			::vl::__vwsn::This(this->__vwsn_precompile_5.Obj())->SetText(::vl::WString(L"Name", false));
		}
		{
			auto __vwsn_collection_ = ::vl::__vwsn::UnboxCollection<::vl::reflection::description::IValueList>(::vl::__vwsn::This(this->bindableListView)->GetColumns());
			::vl::__vwsn::This(__vwsn_collection_.Obj())->Add(::vl::__vwsn::Box(this->__vwsn_precompile_5));
		}
		(this->__vwsn_precompile_6 = ::vl::Ptr<::vl::presentation::controls::list::ListViewColumn>(new ::vl::presentation::controls::list::ListViewColumn()));
		{
			::vl::__vwsn::This(this->__vwsn_precompile_6.Obj())->SetTextProperty(LAMBDA(::vl_workflow_global::__vwsnf5_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(this)));
		}
		{
			::vl::__vwsn::This(this->__vwsn_precompile_6.Obj())->SetText(::vl::WString(L"Description", false));
		}
		{
			auto __vwsn_collection_ = ::vl::__vwsn::UnboxCollection<::vl::reflection::description::IValueList>(::vl::__vwsn::This(this->bindableListView)->GetColumns());
			::vl::__vwsn::This(__vwsn_collection_.Obj())->Add(::vl::__vwsn::Box(this->__vwsn_precompile_6));
		}
		{
			::vl::__vwsn::This(this->__vwsn_precompile_4)->AddChild(static_cast<::vl::presentation::compositions::GuiGraphicsComposition*>(::vl::__vwsn::This(this->bindableListView)->GetBoundsComposition()));
		}
		{
			::vl::__vwsn::This(this->__vwsn_precompile_0)->AddChild(static_cast<::vl::presentation::compositions::GuiGraphicsComposition*>(this->__vwsn_precompile_4));
		}
		{
			::vl::__vwsn::This(::vl::__vwsn::This(this->self)->GetContainerComposition())->AddChild(static_cast<::vl::presentation::compositions::GuiGraphicsComposition*>(this->__vwsn_precompile_0));
		}
		{
			::vl::__vwsn::EventAttach(::vl::__vwsn::This(this->bindableTreeView)->SelectionChanged, LAMBDA(::vl_workflow_global::__vwsno6_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(__vwsn_this_, this)));
		}
		{
			auto __vwsn_created_subscription_ = ::vl::Ptr<::vl::reflection::description::IValueSubscription>(new ::vl_workflow_global::__vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription(this));
			::vl::__vwsn::EventAttach(::vl::__vwsn::This(__vwsn_created_subscription_.Obj())->ValueChanged, LAMBDA(::vl_workflow_global::__vwsnf7_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(this)));
			::vl::__vwsn::This(__vwsn_this_)->AddSubscription(__vwsn_created_subscription_);
		}
		{
			::vl::__vwsn::This(this->self)->SetCustomIcon(::vl::__vwsn::Ensure(::vl::__vwsn::SharedPtrCast<::vl::presentation::GuiImageData>(::vl::__vwsn::This(__vwsn_this_)->ResolveResource(::vl::WString(L"res", false), ::vl::WString(L"Images/MainWindowIcon", false), true).Obj())));
		}
	}

	MainWindowConstructor::MainWindowConstructor()
		: self(static_cast<::Hardware::MainWindow*>(nullptr))
		, bindableTreeView(static_cast<::vl::presentation::controls::GuiBindableTreeView*>(nullptr))
		, bindableListView(static_cast<::vl::presentation::controls::GuiBindableListView*>(nullptr))
		, __vwsn_precompile_0(static_cast<::vl::presentation::compositions::GuiTableComposition*>(nullptr))
		, __vwsn_precompile_1(static_cast<::vl::presentation::compositions::GuiCellComposition*>(nullptr))
		, __vwsn_precompile_2(static_cast<::vl::presentation::compositions::GuiBoundsComposition*>(nullptr))
		, __vwsn_precompile_3(static_cast<::vl::presentation::compositions::GuiColumnSplitterComposition*>(nullptr))
		, __vwsn_precompile_4(static_cast<::vl::presentation::compositions::GuiCellComposition*>(nullptr))
		, __vwsn_precompile_5(::vl::Ptr<::vl::presentation::controls::list::ListViewColumn>())
		, __vwsn_precompile_6(::vl::Ptr<::vl::presentation::controls::list::ListViewColumn>())
		, __vwsn_precompile_7(static_cast<::vl::presentation::compositions::GuiBoundsComposition*>(nullptr))
		, __vwsn_precompile_8(static_cast<::vl::presentation::compositions::GuiBoundsComposition*>(nullptr))
	{
	}

	/***********************************************************************
	Class (::Hardware::MainWindow)
	***********************************************************************/

	::vl::Ptr<::vl::presentation::GuiImageData> MainWindow::GetCustomIcon()
	{
		return this->__vwsn_prop_CustomIcon;
	}
	void MainWindow::SetCustomIcon(::vl::Ptr<::vl::presentation::GuiImageData> __vwsn_value_)
	{
		if ((this->__vwsn_prop_CustomIcon.Obj() != __vwsn_value_.Obj()))
		{
			(this->__vwsn_prop_CustomIcon = __vwsn_value_);
			::vl::__vwsn::EventInvoke(this->CustomIconChanged)();
		}
	}

	::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider> MainWindow::GetnodesToBind()
	{
		return this->__vwsn_prop_nodesToBind;
	}
	void MainWindow::SetnodesToBind(::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider> __vwsn_value_)
	{
		if ((this->__vwsn_prop_nodesToBind.Obj() != __vwsn_value_.Obj()))
		{
			(this->__vwsn_prop_nodesToBind = __vwsn_value_);
			::vl::__vwsn::EventInvoke(this->nodesToBindChanged)();
		}
	}

	::vl::Ptr<::vl::reflection::description::IValueObservableList> MainWindow::GetListNodesToBind()
	{
		return this->__vwsn_prop_ListNodesToBind;
	}
	void MainWindow::SetListNodesToBind(::vl::Ptr<::vl::reflection::description::IValueObservableList> __vwsn_value_)
	{
		if ((this->__vwsn_prop_ListNodesToBind.Obj() != __vwsn_value_.Obj()))
		{
			(this->__vwsn_prop_ListNodesToBind = __vwsn_value_);
			::vl::__vwsn::EventInvoke(this->ListNodesToBindChanged)();
		}
	}

	void MainWindow::TreeView_Selection_Changed(::vl::presentation::compositions::GuiGraphicsComposition* sender, ::vl::presentation::compositions::GuiEventArgs* arguments)
	{/* USER_CONTENT_BEGIN(::Hardware::MainWindow) */
		auto Item = bindableTreeView->GetSelectedItem();
		if (Item.GetValueType() == ::vl::reflection::description::Value::ValueType::SharedPtr)
		{
			auto CurrentItem = Item.GetSharedPtr().Cast<::vl::presentation::controls::tree::MemoryNodeProvider>();
			auto TypeProp = CurrentItem->GetInternalProperty(L"Type").Cast<::vl::WString>();
			if (TypeProp)
			{
				auto NewList = this->GetListNodesToBind();
				if (*TypeProp.Obj() == L"CPU")
				{
					NewList->Clear();
					auto SocketId = CurrentItem->GetInternalProperty(L"SocketProp").Cast<::vl::ObjectBox<::vl::vint>>();
					auto SocketDatas = HardwareWrapper::CPU::GetElements(SocketId.Obj()->Unbox());
					if (!SocketDatas.empty())
					{
						for (const auto& Data : SocketDatas)
						{
							NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
						}
					}
					auto SocketDynamicDatas = HardwareWrapper::CPU::UpdateElements(SocketId.Obj()->Unbox());
					if (!SocketDynamicDatas.empty())
					{
						for (const auto& Data : SocketDynamicDatas)
						{
							NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
						}
					}
				}
				else if (*TypeProp.Obj() == L"Core")
				{
					NewList->Clear();

					auto CoreId = CurrentItem->GetInternalProperty(L"CoreProp").Cast<UI::CPUCoreTreeInternalProperty>();
					auto SocketDatas = HardwareWrapper::CPU::UpdateElements(CoreId.Obj()->GetSocketId(), CoreId.Obj()->GetCoreId(),
						CoreId.Obj()->GetThreadIds()->Get(0).GetSharedPtr().Cast<UI::IntWrapper>()->GetValue());
					if (!SocketDatas.empty())
					{
						for (const auto& Data : SocketDatas)
						{
							NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
						}
					}
				}
				else if (*TypeProp.Obj() == L"GPU")
				{
					NewList->Clear();
					auto GpuId = CurrentItem->GetInternalProperty(L"GPUProp").Cast<UI::HardwareTreeInternalProperty>();
					auto GPUDatas = HardwareWrapper::GPU::GetElements(GpuId.Obj()->GetId());
					if (!GPUDatas.empty())
					{
						for (const auto& Data : GPUDatas)
						{
							NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
						}
					}
					auto GPUDynamicDatas = HardwareWrapper::GPU::UpdateElements(GpuId.Obj()->GetId());
					if (!GPUDynamicDatas.empty())
					{
						for (const auto& Data : GPUDynamicDatas)
						{
							NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
						}
					}
				}
				else if (*TypeProp.Obj() == L"DISK")
				{
					NewList->Clear();
					auto DiskInfo = CurrentItem->GetInternalProperty(L"DiskProp").Cast<DiskInternalProperty>();
					{
						auto DiskDatas = HardwareWrapper::Disk::GetElements(DiskInfo.Obj()->GetSelf());
						if (!DiskDatas.empty())
						{
							for (const auto& Data : DiskDatas)
							{
								NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
							}
						}
					}

					{
						auto DiskDatas = HardwareWrapper::Disk::UpdateElements(DiskInfo.Obj()->GetSelf());
						if (!DiskDatas.empty())
						{
							for (const auto& Data : DiskDatas)
							{
								NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
							}
						}
					}
				}
				else if (*TypeProp.Obj() == L"MEMORY")
				{
					NewList->Clear();
					auto MemoryId = CurrentItem->GetInternalProperty(L"MemoryProp").Cast<UI::HardwareTreeInternalProperty>();
					auto MemoryDatas = HardwareWrapper::Memory::GetElements(MemoryId.Obj()->GetId());
					if (!MemoryDatas.empty())
					{
						for (const auto& Data : MemoryDatas)
						{
							NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
						}
					}
					auto MemoryDynamicDatas = HardwareWrapper::Memory::UpdateElements(MemoryId.Obj()->GetId());
					if (!MemoryDynamicDatas.empty())
					{
						for (const auto& Data : MemoryDynamicDatas)
						{
							NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
						}
					}
				}
				else if (*TypeProp.Obj() == L"BATTERY")
				{
					NewList->Clear();
					auto BatteryId = CurrentItem->GetInternalProperty(L"BatteryProp").Cast<UI::HardwareTreeInternalProperty>();
					auto BatteryDatas = HardwareWrapper::Battery::UpdateElements(BatteryId.Obj()->GetId());
					if (!BatteryDatas.empty())
					{
						for (const auto& Data : BatteryDatas)
						{
							NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
						}
					}
				}
				else if (*TypeProp.Obj() == L"MONITOR")
				{
					NewList->Clear();
					auto MonitorId = CurrentItem->GetInternalProperty(L"MonitorProp").Cast<::vl::WString>();
					auto MonitorDatas = HardwareWrapper::Monitor::GetElements(utf8_encode(MonitorId.Obj()->Buffer()));
					if (!MonitorDatas.empty())
					{
						for (const auto& Data : MonitorDatas)
						{
							NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
						}
					}
				}
				else if (*TypeProp.Obj() == L"NET")
				{
					NewList->Clear();
					auto NetId = CurrentItem->GetInternalProperty(L"NetProp").Cast<UI::HardwareTreeInternalProperty>();
					{
						auto Datas = HardwareWrapper::Net::GetElements(NetId.Obj()->GetId());
						if (!Datas.empty())
						{
							for (const auto& Data : Datas)
							{
								NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
							}
						}
					}
					{
						auto Datas = HardwareWrapper::Net::UpdateElements(NetId.Obj()->GetId());
						if (!Datas.empty())
						{
							for (const auto& Data : Datas)
							{
								NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
							}
						}
					}
				}
				else if (*TypeProp.Obj() == L"BIOS")
				{
					NewList->Clear();
					auto BiosId = CurrentItem->GetInternalProperty(L"BiosProp").Cast<UI::HardwareTreeInternalProperty>();
					auto BiosDatas = HardwareWrapper::Bios::GetElements(BiosId.Obj()->GetId());
					if (!BiosDatas.empty())
					{
						for (const auto& Data : BiosDatas)
						{
							NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
						}
					}
				}
				else if (*TypeProp.Obj() == L"BROAD")
				{
					NewList->Clear();
					auto BroadId = CurrentItem->GetInternalProperty(L"BroadProp").Cast<UI::HardwareTreeInternalProperty>();
					auto BroadDatas = HardwareWrapper::Motherbroad::GetElements(BroadId.Obj()->GetId());
					if (!BroadDatas.empty())
					{
						for (const auto& Data : BroadDatas)
						{
							NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
						}
					}
				}
				else if (*TypeProp.Obj() == L"WINBIO")
				{
					NewList->Clear();
					auto WinBioId = CurrentItem->GetInternalProperty(L"WinBioProp").Cast<UI::HardwareTreeInternalProperty>();
					auto WinBioDatas = HardwareWrapper::WinBio::GetElements(WinBioId.Obj()->GetId());
					if (!WinBioDatas.empty())
					{
						for (const auto& Data : WinBioDatas)
						{
							NewList->Add(::vl::__vwsn::Box(::vl::MakePtr<::Hardware::UI::TreeViewItemData>(Data.first.c_str(), Data.second.c_str())));
						}
					}
				}
			}
		}
	}/* USER_CONTENT_END() */

	MainWindow::MainWindow()
		: ::vl::presentation::controls::GuiWindow(::vl::presentation::theme::ThemeName::Window)
		, __vwsn_prop_CustomIcon(::vl::Ptr<::vl::presentation::GuiImageData>())
		, __vwsn_prop_nodesToBind(::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>())
		, __vwsn_prop_ListNodesToBind(::vl::Ptr<::vl::reflection::description::IValueObservableList>())
	{
		auto __vwsn_resource_ = ::vl::__vwsn::This(::vl::presentation::GetResourceManager())->GetResourceFromClassName(::vl::WString(L"Hardware::MainWindow", false));
		auto __vwsn_resolver_ = ::vl::Ptr<::vl::presentation::GuiResourcePathResolver>(new ::vl::presentation::GuiResourcePathResolver(__vwsn_resource_, ::vl::__vwsn::This(__vwsn_resource_.Obj())->GetWorkingDirectory()));
		::vl::__vwsn::This(this)->SetResourceResolver(__vwsn_resolver_);
		::vl::__vwsn::This(this)->__vwsn_Hardware_MainWindow_Initialize(this);
		this->__vwsn_instance_ctor_();
	}

	void MainWindow::__vwsn_instance_ctor_()
	{
		/* USER_CONTENT_BEGIN(::Hardware::MainWindow) */
		auto Root = ::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>(new ::vl::presentation::controls::tree::MemoryNodeProvider(::vl::Ptr<::vl::reflection::DescriptableObject>(::vl::Ptr<::vl::presentation::controls::tree::TreeViewItem>(new ::vl::presentation::controls::tree::TreeViewItem()))));
		auto CPUs = HardwareWrapper::CPU::InitializeCPU();
		if (!CPUs.empty())
		{
			for (const auto& Cpu : CPUs)
			{
				auto Item = ::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>(
					new ::vl::presentation::controls::tree::MemoryNodeProvider(
						::vl::Ptr<::vl::reflection::DescriptableObject>(
							::vl::Ptr<::vl::presentation::controls::tree::TreeViewItem>
							(new ::vl::presentation::controls::tree::TreeViewItem(nullptr, ::vl::WString((L"CPU " + std::to_wstring(Cpu.SocketID)).c_str(), true))))));
				Item->SetInternalProperty(L"Type", ::vl::MakePtr<::vl::WString>(L"CPU"));
				Item->SetInternalProperty(L"SocketProp", ::vl::MakePtr<::vl::ObjectBox<::vl::vint>>(Cpu.SocketID));
				for (const auto& Core : Cpu.Cores)
				{
					auto CoreItem = ::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>(
						new ::vl::presentation::controls::tree::MemoryNodeProvider(
							::vl::Ptr<::vl::reflection::DescriptableObject>(
								::vl::Ptr<::vl::presentation::controls::tree::TreeViewItem>
								(new ::vl::presentation::controls::tree::TreeViewItem(nullptr, ::vl::WString((L"Core " + std::to_wstring(Core.CoreId)).c_str(), true))))));
					auto ThreadList = ::vl::__vwsn::CreateObservableList();
					for (const auto& ThreadId : Core.ThreadIds)
					{
						ThreadList.Add(::vl::MakePtr<UI::IntWrapper>(ThreadId));
					}
					auto CorePtr = ::vl::MakePtr<UI::CPUCoreTreeInternalProperty>(Core.CoreId, Cpu.SocketID, ThreadList.list);

					CoreItem->SetInternalProperty(L"CoreProp", CorePtr);
					CoreItem->SetInternalProperty(L"Type", ::vl::MakePtr<::vl::WString>(L"Core"));
					Item.Obj()->Children().Add(CoreItem);
				}
				Root->Children().Add(Item);
			}
		}

		auto GPUs = HardwareWrapper::GPU::InitializeGPU();
		if (!GPUs.empty())
		{
			for (const auto& Gpu : GPUs)
			{
				auto Item = ::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>(
					new ::vl::presentation::controls::tree::MemoryNodeProvider(
						::vl::Ptr<::vl::reflection::DescriptableObject>(
							::vl::Ptr<::vl::presentation::controls::tree::TreeViewItem>
							(new ::vl::presentation::controls::tree::TreeViewItem(nullptr, ::vl::WString((L"GPU " + std::to_wstring(Gpu.GPUId)).c_str(), true))))));
				Item->SetInternalProperty(L"Type", ::vl::MakePtr<::vl::WString>(L"GPU"));
				Item->SetInternalProperty(L"GPUProp", ::vl::MakePtr<UI::HardwareTreeInternalProperty>(Gpu.GPUId));
				Root->Children().Add(Item);
			}
		}

		auto Disks = HardwareWrapper::Disk::InitializeDisk();
		if (!Disks.empty())
		{
			for (const auto& Disk : Disks)
			{
				auto Item = ::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>(
					new ::vl::presentation::controls::tree::MemoryNodeProvider(
						::vl::Ptr<::vl::reflection::DescriptableObject>(
							::vl::Ptr<::vl::presentation::controls::tree::TreeViewItem>
							(new ::vl::presentation::controls::tree::TreeViewItem(nullptr, ::vl::WString((L"Disk " + std::to_wstring(Disk.DiskId)).c_str(), true))))));
				Item->SetInternalProperty(L"Type", ::vl::MakePtr<::vl::WString>(L"DISK"));
				Item->SetInternalProperty(L"DiskProp", ::vl::MakePtr<DiskInternalProperty>(Disk));
				Root->Children().Add(Item);
			}
		}

		auto Memorys = HardwareWrapper::Memory::InitializeMemory();
		if (!Memorys.empty())
		{
			for (const auto& MemoryId : Memorys)
			{
				auto Item = ::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>(
					new ::vl::presentation::controls::tree::MemoryNodeProvider(
						::vl::Ptr<::vl::reflection::DescriptableObject>(
							::vl::Ptr<::vl::presentation::controls::tree::TreeViewItem>
							(new ::vl::presentation::controls::tree::TreeViewItem(nullptr, ::vl::WString((L"Memory " + std::to_wstring(MemoryId)).c_str(), true))))));
				Item->SetInternalProperty(L"Type", ::vl::MakePtr<::vl::WString>(L"MEMORY"));
				Item->SetInternalProperty(L"MemoryProp", ::vl::MakePtr<UI::HardwareTreeInternalProperty>(MemoryId));
				Root->Children().Add(Item);
			}
		}

		auto Batterys = HardwareWrapper::Battery::InitializeBattery();
		if (!Batterys.empty())
		{
			for (const auto& BatteryId : Batterys)
			{
				auto Item = ::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>(
					new ::vl::presentation::controls::tree::MemoryNodeProvider(
						::vl::Ptr<::vl::reflection::DescriptableObject>(
							::vl::Ptr<::vl::presentation::controls::tree::TreeViewItem>
							(new ::vl::presentation::controls::tree::TreeViewItem(nullptr, ::vl::WString((L"Battery " + std::to_wstring(BatteryId)).c_str(), true))))));
				Item->SetInternalProperty(L"Type", ::vl::MakePtr<::vl::WString>(L"BATTERY"));
				Item->SetInternalProperty(L"BatteryProp", ::vl::MakePtr<UI::HardwareTreeInternalProperty>(BatteryId));
				Root->Children().Add(Item);
			}
		}

		auto Monitors = HardwareWrapper::Monitor::InitializeMonitor();
		if (!Monitors.empty())
		{
			for (const auto& MonitorId : Monitors)
			{
				auto Item = ::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>(
					new ::vl::presentation::controls::tree::MemoryNodeProvider(
						::vl::Ptr<::vl::reflection::DescriptableObject>(
							::vl::Ptr<::vl::presentation::controls::tree::TreeViewItem>
							(new ::vl::presentation::controls::tree::TreeViewItem(nullptr, ::vl::WString((L"Monitor " + utf8_decode(MonitorId)).c_str(), true))))));
				Item->SetInternalProperty(L"Type", ::vl::MakePtr<::vl::WString>(L"MONITOR"));
				Item->SetInternalProperty(L"MonitorProp", ::vl::MakePtr<::vl::WString>(utf8_decode(MonitorId).c_str()));
				Root->Children().Add(Item);
			}
		}

		auto Nets = HardwareWrapper::Net::InitializeNet();
		if (!Nets.empty())
		{
			for (const auto& NICId : Nets)
			{
				auto Item = ::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>(
					new ::vl::presentation::controls::tree::MemoryNodeProvider(
						::vl::Ptr<::vl::reflection::DescriptableObject>(
							::vl::Ptr<::vl::presentation::controls::tree::TreeViewItem>
							(new ::vl::presentation::controls::tree::TreeViewItem(nullptr, ::vl::WString((L"Network " + std::to_wstring(NICId)).c_str(), true))))));
				Item->SetInternalProperty(L"Type", ::vl::MakePtr<::vl::WString>(L"NET"));
				Item->SetInternalProperty(L"NetProp", ::vl::MakePtr<UI::HardwareTreeInternalProperty>(NICId));
				Root->Children().Add(Item);
			}
		}

		auto Bioss = HardwareWrapper::Bios::InitializeBios();
		if (!Bioss.empty())
		{
			for (const auto& BiosId : Bioss)
			{
				auto Item = ::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>(
					new ::vl::presentation::controls::tree::MemoryNodeProvider(
						::vl::Ptr<::vl::reflection::DescriptableObject>(
							::vl::Ptr<::vl::presentation::controls::tree::TreeViewItem>
							(new ::vl::presentation::controls::tree::TreeViewItem(nullptr, ::vl::WString((L"Bios " + std::to_wstring(BiosId)).c_str(), true))))));
				Item->SetInternalProperty(L"Type", ::vl::MakePtr<::vl::WString>(L"BIOS"));
				Item->SetInternalProperty(L"BiosProp", ::vl::MakePtr<UI::HardwareTreeInternalProperty>(BiosId));
				Root->Children().Add(Item);
			}
		}

		auto Broads = HardwareWrapper::Motherbroad::InitializeMotherbroad();
		if (!Broads.empty())
		{
			for (const auto& BroadId : Bioss)
			{
				auto Item = ::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>(
					new ::vl::presentation::controls::tree::MemoryNodeProvider(
						::vl::Ptr<::vl::reflection::DescriptableObject>(
							::vl::Ptr<::vl::presentation::controls::tree::TreeViewItem>
							(new ::vl::presentation::controls::tree::TreeViewItem(nullptr, ::vl::WString((L"Mother Broad " + std::to_wstring(BroadId)).c_str(), true))))));
				Item->SetInternalProperty(L"Type", ::vl::MakePtr<::vl::WString>(L"BROAD"));
				Item->SetInternalProperty(L"BroadProp", ::vl::MakePtr<UI::HardwareTreeInternalProperty>(BroadId));
				Root->Children().Add(Item);
			}
		}

		auto Winbios = HardwareWrapper::WinBio::InitializeWinBio();
		if (!Winbios.empty())
		{
			for (const auto& WinbioId : Winbios)
			{
				auto Item = ::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider>(
					new ::vl::presentation::controls::tree::MemoryNodeProvider(
						::vl::Ptr<::vl::reflection::DescriptableObject>(
							::vl::Ptr<::vl::presentation::controls::tree::TreeViewItem>
							(new ::vl::presentation::controls::tree::TreeViewItem(nullptr, ::vl::WString((L"Windows biological " + std::to_wstring(WinbioId)).c_str(), true))))));
				Item->SetInternalProperty(L"Type", ::vl::MakePtr<::vl::WString>(L"WINBIO"));
				Item->SetInternalProperty(L"WinBioProp", ::vl::MakePtr<UI::HardwareTreeInternalProperty>(WinbioId));
				Root->Children().Add(Item);
			}
		}

		this->SetnodesToBind(Root);
		/* USER_CONTENT_END() */
		this->SetListNodesToBind(::vl::reflection::description::IValueObservableList::Create());
		::vl::__vwsn::This(this->bindableListView)->SetItemSource(::vl::Ptr<::vl::reflection::description::IValueEnumerable>(this->GetListNodesToBind()));
		::vl::__vwsn::This(this->bindableTreeView)->SetItemSource(::vl::__vwsn::Box(this->GetnodesToBind()));
	}

	MainWindow::~MainWindow()
	{
		this->FinalizeInstanceRecursively(static_cast<::vl::presentation::controls::GuiControlHost*>(this));
	}

	/***********************************************************************
	Class (::Hardware::UI::CPUCoreTreeInternalProperty)
	***********************************************************************/

	namespace UI
	{
		::vl::vint CPUCoreTreeInternalProperty::GetCoreId()
		{
			return this->__vwsn_prop_CoreId;
		}

		void CPUCoreTreeInternalProperty::SetCoreId(::vl::vint __vwsn_value_)
		{
			if ((this->__vwsn_prop_CoreId != __vwsn_value_))
			{
				(this->__vwsn_prop_CoreId = __vwsn_value_);
				::vl::__vwsn::EventInvoke(this->CoreIdChanged)();
			}
		}

		::vl::vint CPUCoreTreeInternalProperty::GetSocketId()
		{
			return this->__vwsn_prop_SocketId;
		}

		void CPUCoreTreeInternalProperty::SetSocketId(::vl::vint __vwsn_value_)
		{
			if ((this->__vwsn_prop_SocketId != __vwsn_value_))
			{
				(this->__vwsn_prop_SocketId = __vwsn_value_);
				::vl::__vwsn::EventInvoke(this->SocketIdChanged)();
			}
		}

		::vl::WString CPUCoreTreeInternalProperty::GetName()
		{
			return this->__vwsn_prop_Name;
		}

		void CPUCoreTreeInternalProperty::SetName(const ::vl::WString& __vwsn_value_)
		{
			(this->__vwsn_prop_Name = __vwsn_value_);
		}

		::vl::Ptr<::vl::reflection::description::IValueObservableList> CPUCoreTreeInternalProperty::GetThreadIds()
		{
			return this->__vwsn_prop_ThreadIds;
		}

		void CPUCoreTreeInternalProperty::SetThreadIds(::vl::Ptr<::vl::reflection::description::IValueObservableList> __vwsn_value_)
		{
			if ((this->__vwsn_prop_ThreadIds.Obj() != __vwsn_value_.Obj()))
			{
				(this->__vwsn_prop_ThreadIds = __vwsn_value_);
				::vl::__vwsn::EventInvoke(this->ThreadIdsChanged)();
			}
		}

		CPUCoreTreeInternalProperty::CPUCoreTreeInternalProperty(::vl::vint coreid, ::vl::vint socketid, ::vl::Ptr<::vl::reflection::description::IValueObservableList> threadIds)
			: __vwsn_prop_CoreId(static_cast<::vl::vint>(0))
			, __vwsn_prop_SocketId(static_cast<::vl::vint>(0))
			, __vwsn_prop_Name(::vl::WString(L"", false))
			, __vwsn_prop_ThreadIds(::vl::Ptr<::vl::reflection::description::IValueObservableList>())
		{
			this->SetCoreId(coreid);
			this->SetSocketId(socketid);
			this->SetThreadIds(threadIds);
			this->SetName(::vl::WString(L"", false));
		}

		/***********************************************************************
		Class (::Hardware::UI::HardwareTreeInternalProperty)
		***********************************************************************/

		::vl::vint HardwareTreeInternalProperty::GetId()
		{
			return this->__vwsn_prop_Id;
		}

		void HardwareTreeInternalProperty::SetId(::vl::vint __vwsn_value_)
		{
			if ((this->__vwsn_prop_Id != __vwsn_value_))
			{
				(this->__vwsn_prop_Id = __vwsn_value_);
				::vl::__vwsn::EventInvoke(this->IdChanged)();
			}
		}

		::vl::WString HardwareTreeInternalProperty::GetName()
		{
			return this->__vwsn_prop_Name;
		}

		void HardwareTreeInternalProperty::SetName(const ::vl::WString& __vwsn_value_)
		{
			(this->__vwsn_prop_Name = __vwsn_value_);
		}

		HardwareTreeInternalProperty::HardwareTreeInternalProperty(::vl::vint id)
			: __vwsn_prop_Id(static_cast<::vl::vint>(0))
			, __vwsn_prop_Name(::vl::WString(L"", false))
		{
			this->SetId(id);
			this->SetName(::vl::WString(L"", false));
		}

		HardwareTreeInternalProperty::HardwareTreeInternalProperty(::vl::vint id, const ::vl::WString& name)
			: __vwsn_prop_Id(static_cast<::vl::vint>(0))
			, __vwsn_prop_Name(::vl::WString(L"", false))
		{
			this->SetId(id);
			this->SetName(name);
		}

		/***********************************************************************
		Class (::Hardware::UI::IntWrapper)
		***********************************************************************/

		::vl::vint IntWrapper::GetValue()
		{
			return this->__vwsn_prop_Value;
		}

		void IntWrapper::SetValue(::vl::vint __vwsn_value_)
		{
			if ((this->__vwsn_prop_Value != __vwsn_value_))
			{
				(this->__vwsn_prop_Value = __vwsn_value_);
				::vl::__vwsn::EventInvoke(this->ValueChanged)();
			}
		}

		IntWrapper::IntWrapper(::vl::vint value)
			: __vwsn_prop_Value(static_cast<::vl::vint>(0))
		{
			this->SetValue(value);
		}

		/***********************************************************************
		Class (::Hardware::UI::TreeViewItemData)
		***********************************************************************/

		::vl::WString TreeViewItemData::GetName()
		{
			return this->__vwsn_prop_Name;
		}

		void TreeViewItemData::SetName(const ::vl::WString& __vwsn_value_)
		{
			(this->__vwsn_prop_Name = __vwsn_value_);
		}

		::vl::WString TreeViewItemData::GetDesc()
		{
			return this->__vwsn_prop_Desc;
		}

		void TreeViewItemData::SetDesc(const ::vl::WString& __vwsn_value_)
		{
			(this->__vwsn_prop_Desc = __vwsn_value_);
		}

		TreeViewItemData::TreeViewItemData()
			: __vwsn_prop_Name(::vl::WString(L"", false))
			, __vwsn_prop_Desc(::vl::WString(L"", false))
		{
		}

		TreeViewItemData::TreeViewItemData(const ::vl::WString& name, const ::vl::WString& desc)
			: __vwsn_prop_Name(::vl::WString(L"", false))
			, __vwsn_prop_Desc(::vl::WString(L"", false))
		{
			this->SetName(name);
			this->SetDesc(desc);
		}
	}
}
#undef GLOBAL_SYMBOL
#undef GLOBAL_NAME
#undef GLOBAL_OBJ

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#elif defined(__clang__)
#pragma clang diagnostic pop
#endif