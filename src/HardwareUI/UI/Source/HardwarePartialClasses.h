/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

GacGen.exe MainWindow.xml

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#ifndef VCZH_WORKFLOW_COMPILER_GENERATED_HARDWAREPARTIALCLASSES
#define VCZH_WORKFLOW_COMPILER_GENERATED_HARDWAREPARTIALCLASSES

#include "GacUI.h"
#include "vector"

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wparentheses-equality"
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#endif

namespace vl_workflow_global
{
	struct __vwsnf1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
	struct __vwsnf2_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
	struct __vwsnf3_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
	struct __vwsnf4_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
	struct __vwsnf5_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
	struct __vwsnf7_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
	struct __vwsno6_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
	class __vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription;
}

namespace Hardware
{
	class MainWindowConstructor;
	class MainWindow;
	namespace UI
	{
		class CPUCoreTreeInternalProperty;
		class HardwareTreeInternalProperty;
		class IntWrapper;
		class StringWrapper;
		class TreeViewItemData;

	}
	class MainWindowConstructor : public ::vl::Object, public ::vl::reflection::Description<MainWindowConstructor>
	{
		friend class ::vl_workflow_global::__vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription;
		friend struct ::vl_workflow_global::__vwsnf1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
		friend struct ::vl_workflow_global::__vwsnf2_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
		friend struct ::vl_workflow_global::__vwsnf3_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
		friend struct ::vl_workflow_global::__vwsnf4_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
		friend struct ::vl_workflow_global::__vwsnf5_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
		friend struct ::vl_workflow_global::__vwsnf7_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
		friend struct ::vl_workflow_global::__vwsno6_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
#ifndef VCZH_DEBUG_NO_REFLECTION
		friend struct ::vl::reflection::description::CustomTypeDescriptorSelector<MainWindowConstructor>;
#endif
	protected:
		::Hardware::MainWindow* self;
		::vl::presentation::controls::GuiBindableTreeView* bindableTreeView;
		::vl::presentation::controls::GuiBindableListView* bindableListView;
		::vl::presentation::compositions::GuiTableComposition* __vwsn_precompile_0;
		::vl::presentation::compositions::GuiCellComposition* __vwsn_precompile_1;
		::vl::presentation::compositions::GuiBoundsComposition* __vwsn_precompile_2;
		::vl::presentation::compositions::GuiColumnSplitterComposition* __vwsn_precompile_3;
		::vl::presentation::compositions::GuiCellComposition* __vwsn_precompile_4;
		::vl::Ptr<::vl::presentation::controls::list::ListViewColumn> __vwsn_precompile_5;
		::vl::Ptr<::vl::presentation::controls::list::ListViewColumn> __vwsn_precompile_6;
		::vl::presentation::compositions::GuiBoundsComposition* __vwsn_precompile_7;
		::vl::presentation::compositions::GuiBoundsComposition* __vwsn_precompile_8;
		void __vwsn_Hardware_MainWindow_Initialize(::Hardware::MainWindow* __vwsn_this_);
	public:
		MainWindowConstructor();
	};

	class MainWindow : public ::vl::presentation::controls::GuiWindow, public ::Hardware::MainWindowConstructor, public ::vl::reflection::Description<MainWindow>
	{
		friend class ::Hardware::MainWindowConstructor;
		friend class ::vl_workflow_global::__vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription;
		friend struct ::vl_workflow_global::__vwsnf1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
		friend struct ::vl_workflow_global::__vwsnf2_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
		friend struct ::vl_workflow_global::__vwsnf3_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
		friend struct ::vl_workflow_global::__vwsnf4_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
		friend struct ::vl_workflow_global::__vwsnf5_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
		friend struct ::vl_workflow_global::__vwsnf7_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
		friend struct ::vl_workflow_global::__vwsno6_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_;
#ifndef VCZH_DEBUG_NO_REFLECTION
		friend struct ::vl::reflection::description::CustomTypeDescriptorSelector<MainWindow>;
#endif
	public:
		::vl::Ptr<::vl::presentation::GuiImageData> __vwsn_prop_CustomIcon;
		::vl::Ptr<::vl::presentation::GuiImageData> GetCustomIcon();
		void SetCustomIcon(::vl::Ptr<::vl::presentation::GuiImageData> __vwsn_value_);
		::vl::Event<void()> CustomIconChanged;
		::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider> __vwsn_prop_nodesToBind;
		::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider> GetnodesToBind();
		void SetnodesToBind(::vl::Ptr<::vl::presentation::controls::tree::MemoryNodeProvider> __vwsn_value_);
		::vl::Event<void()> nodesToBindChanged;
		::vl::Ptr<::vl::reflection::description::IValueObservableList> __vwsn_prop_ListNodesToBind;
		::vl::Ptr<::vl::reflection::description::IValueObservableList> GetListNodesToBind();
		void SetListNodesToBind(::vl::Ptr<::vl::reflection::description::IValueObservableList> __vwsn_value_);
		::vl::Event<void()> ListNodesToBindChanged;
	protected:
		void TreeView_Selection_Changed(::vl::presentation::compositions::GuiGraphicsComposition* sender, ::vl::presentation::compositions::GuiEventArgs* arguments);
	public:
		MainWindow();
		void __vwsn_instance_ctor_();
		~MainWindow();

	/* USER_CONTENT_BEGIN(custom members of ::Hardware::MainWindow) */
	/* USER_CONTENT_END() */
	};

	namespace UI
	{
		class CPUCoreTreeInternalProperty : public ::vl::Object, public ::vl::reflection::Description<CPUCoreTreeInternalProperty>
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			friend struct ::vl::reflection::description::CustomTypeDescriptorSelector<CPUCoreTreeInternalProperty>;
#endif
		private:
			::vl::vint __vwsn_prop_CoreId;
		public:
			::vl::vint GetCoreId();
			void SetCoreId(::vl::vint __vwsn_value_);
			::vl::Event<void()> CoreIdChanged;
		private:
			::vl::vint __vwsn_prop_SocketId;
		public:
			::vl::vint GetSocketId();
			void SetSocketId(::vl::vint __vwsn_value_);
			::vl::Event<void()> SocketIdChanged;
		private:
			::vl::WString __vwsn_prop_Name;
		public:
			::vl::WString GetName();
			void SetName(const ::vl::WString& __vwsn_value_);
		private:
			::vl::Ptr<::vl::reflection::description::IValueObservableList> __vwsn_prop_ThreadIds;
		public:
			::vl::Ptr<::vl::reflection::description::IValueObservableList> GetThreadIds();
			void SetThreadIds(::vl::Ptr<::vl::reflection::description::IValueObservableList> __vwsn_value_);
			::vl::Event<void()> ThreadIdsChanged;
			CPUCoreTreeInternalProperty(::vl::vint coreid, ::vl::vint socketid, ::vl::Ptr<::vl::reflection::description::IValueObservableList> threadIds);
		};

		class HardwareTreeInternalProperty : public ::vl::Object, public ::vl::reflection::Description<HardwareTreeInternalProperty>
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			friend struct ::vl::reflection::description::CustomTypeDescriptorSelector<HardwareTreeInternalProperty>;
#endif
		private:
			::vl::vint __vwsn_prop_Id;
		public:
			::vl::vint GetId();
			void SetId(::vl::vint __vwsn_value_);
			::vl::Event<void()> IdChanged;
		private:
			::vl::WString __vwsn_prop_Name;
		public:
			::vl::WString GetName();
			void SetName(const ::vl::WString& __vwsn_value_);
			HardwareTreeInternalProperty(::vl::vint id);
			HardwareTreeInternalProperty(::vl::vint id, const ::vl::WString& name);
		};

		class IntWrapper : public ::vl::Object, public ::vl::reflection::Description<IntWrapper>
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			friend struct ::vl::reflection::description::CustomTypeDescriptorSelector<IntWrapper>;
#endif
		private:
			::vl::vint __vwsn_prop_Value;
		public:
			::vl::vint GetValue();
			void SetValue(::vl::vint __vwsn_value_);
			::vl::Event<void()> ValueChanged;
			IntWrapper(::vl::vint value);
		};

		class StringWrapper : public ::vl::Object, public ::vl::reflection::Description<StringWrapper>
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			friend struct ::vl::reflection::description::CustomTypeDescriptorSelector<StringWrapper>;
#endif
		private:
			::vl::WString __vwsn_prop_Value;
		public:
			::vl::WString GetValue();
			void SetValue(const ::vl::WString& __vwsn_value_);
			StringWrapper();
			StringWrapper(const ::vl::WString& value);
		};

		class TreeViewItemData : public ::vl::Object, public ::vl::reflection::Description<TreeViewItemData>
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			friend struct ::vl::reflection::description::CustomTypeDescriptorSelector<TreeViewItemData>;
#endif
		private:
			::vl::WString __vwsn_prop_Name;
		public:
			::vl::WString GetName();
			void SetName(const ::vl::WString& __vwsn_value_);
		private:
			::vl::WString __vwsn_prop_Desc;
		public:
			::vl::WString GetDesc();
			void SetDesc(const ::vl::WString& __vwsn_value_);
			TreeViewItemData();
			TreeViewItemData(const ::vl::WString& name, const ::vl::WString& desc);
		};

	}
}
/***********************************************************************
Global Variables and Functions
***********************************************************************/

namespace vl_workflow_global
{
	class Hardware
	{
	public:

		static Hardware& Instance();
	};

/***********************************************************************
Closures
***********************************************************************/

	struct __vwsnf1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_
	{
		::Hardware::MainWindowConstructor* __vwsnthis_0;

		__vwsnf1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindowConstructor* __vwsnctorthis_0);

		::vl::Ptr<::vl::reflection::description::IValueEnumerable> operator()(const ::vl::reflection::description::Value& __vwsn_item_) const;
	};

	struct __vwsnf2_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_
	{
		::Hardware::MainWindowConstructor* __vwsnthis_0;

		__vwsnf2_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindowConstructor* __vwsnctorthis_0);

		::vl::Ptr<::vl::presentation::GuiImageData> operator()(const ::vl::reflection::description::Value& __vwsn_item_) const;
	};

	struct __vwsnf3_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_
	{
		::Hardware::MainWindowConstructor* __vwsnthis_0;

		__vwsnf3_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindowConstructor* __vwsnctorthis_0);

		::vl::WString operator()(const ::vl::reflection::description::Value& __vwsn_item_) const;
	};

	struct __vwsnf4_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_
	{
		::Hardware::MainWindowConstructor* __vwsnthis_0;

		__vwsnf4_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindowConstructor* __vwsnctorthis_0);

		::vl::WString operator()(const ::vl::reflection::description::Value& __vwsn_item_) const;
	};

	struct __vwsnf5_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_
	{
		::Hardware::MainWindowConstructor* __vwsnthis_0;

		__vwsnf5_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindowConstructor* __vwsnctorthis_0);

		::vl::WString operator()(const ::vl::reflection::description::Value& __vwsn_item_) const;
	};

	struct __vwsnf7_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_
	{
		::Hardware::MainWindowConstructor* __vwsnthis_0;

		__vwsnf7_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindowConstructor* __vwsnctorthis_0);

		void operator()(const ::vl::reflection::description::Value& __vwsn_value_) const;
	};

	struct __vwsno6_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_
	{
		::Hardware::MainWindow* __vwsn_this_;
		::Hardware::MainWindowConstructor* __vwsnthis_0;

		__vwsno6_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize_(::Hardware::MainWindow* __vwsnctor___vwsn_this_, ::Hardware::MainWindowConstructor* __vwsnctorthis_0);

		void operator()(::vl::presentation::compositions::GuiGraphicsComposition* __vwsno_1, ::vl::presentation::compositions::GuiEventArgs* __vwsno_2) const;
	};

	class __vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription : public ::vl::Object, public virtual ::vl::reflection::description::IValueSubscription
	{
	public:
		::Hardware::MainWindowConstructor* __vwsnthis_0;

		__vwsnc1_Hardware_Hardware_MainWindowConstructor___vwsn_Hardware_MainWindow_Initialize__vl_reflection_description_IValueSubscription(::Hardware::MainWindowConstructor* __vwsnctorthis_0);

		::Hardware::MainWindow* __vwsn_bind_cache_0 = nullptr;
		::vl::Ptr<::vl::reflection::description::IEventHandler> __vwsn_bind_handler_0_0;
		bool __vwsn_bind_opened_ = false;
		bool __vwsn_bind_closed_ = false;
		void __vwsn_bind_activator_();
		void __vwsn_bind_callback_0_0();
		bool Open() override;
		bool Update() override;
		bool Close() override;
	};
}

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#elif defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif
