<?xml version="1.0" encoding="utf-8"?>
<Resource>
  <Folder name="GacGenConfig">
    <Folder name="Cpp">
      <Text name="SourceFolder">..\UI\Source</Text>
      <Text name="Resource">..\UI\HardwareMain.bin</Text>
      <Text name="NormalInclude">GacUI.h;vector</Text>
      <Text name="Name">Hardware</Text>
    </Folder>
  </Folder>

  <Folder name="Images">
    <Image name="MainWindowIcon" content="File">HardwareUI.ico</Image>
  </Folder>

  <Instance name="HardwareMainWindow">
    <Instance ref.CodeBehind="false" ref.Class="Hardware::MainWindow" xmlns:Hardware="Hardware::*">
      <ref.Members>
        <![CDATA[
          prop CustomIcon : GuiImageData^ = null {}
          prop nodesToBind : MemoryNodeProvider^ = null {}
          prop ListNodesToBind : observe UI::TreeViewItemData^[] = null{}
        ]]>
      </ref.Members>
      <ref.Ctor>
        <![CDATA[
        {
           ListNodesToBind = { };
          bindableListView.ItemSource = ListNodesToBind;
          bindableTreeView.ItemSource = nodesToBind;
        }
    ]]>
      </ref.Ctor>
      <Window ref.Name="self" Text="Hardware" ClientSize="x:640 y:480" Icon-bind="self.CustomIcon" CustomIcon-uri="res://Images/MainWindowIcon">
        <att.BoundsComposition-set PreferredMinSize="x:640 y:480" />
        <Table AlignmentToParent="left:5 top:5 right:5 bottom:5" CellPadding="5" MinSizeLimitation="LimitToElementAndChildren">
          <att.Rows>
            <_>composeType:Percentage percentage:1.0</_>
          </att.Rows>
          <att.Columns>
            <_>composeType:Absolute absolute:150</_>
            <_>composeType:Percentage percentage:1.0</_>
          </att.Columns>
          <Cell Site="row:0 column:0">
            <BindableTreeView ref.Name="bindableTreeView" Alt="T" env.ItemType="MemoryNodeProvider^" env.ItemName="nodeToBind" HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false"
                              ev.SelectionChanged="TreeView_Selection_Changed">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0" />
              <att.TextProperty>(nodeToBind.Data as TreeViewItem^).text</att.TextProperty>
              <att.ImageProperty>(nodeToBind.Data as TreeViewItem^).image</att.ImageProperty>
              <att.ChildrenProperty>Children</att.ChildrenProperty>
            </BindableTreeView>
          </Cell>
          <ColumnSplitter ColumnsToTheLeft="1" />
          <Cell Site="row:0 column:1">
            <BindableListView ref.Name="bindableListView" Alt="L" env.ItemType="Hardware::UI::TreeViewItemData^" env.ItemName="itemToBind" HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0" />
              <att.Columns>
                <_ Text="Name" TextProperty="itemToBind.Name" />
                <_ Text="Description" TextProperty="itemToBind.Desc" />
              </att.Columns>

              <att.DataColumns>
                <_>0</_>
              </att.DataColumns>
            </BindableListView>
          </Cell>
        </Table>
      </Window>
    </Instance>
  </Instance>

  <Script name="ViewModelResource">
    <Workflow>
      <![CDATA[
        module viewmodel;

        using system::*;
        using presentation::*;

        namespace Hardware
        {
          namespace UI
          {
            class TreeViewItemData
            {
              prop Name : string = "" {not observe}
              prop Desc : string = "" {not observe}
              new()
              {
              }
              new(name:string, desc : string)
              {
                Name = name;
                Desc = desc;
              }
            }

            class IntWrapper
            {
              prop Value : int = 0{}
              new(value : int)
              {
                Value = value;
              }
            }

            class CPUCoreTreeInternalProperty
            {
              prop CoreId : int= 0 {}
              prop SocketId : int= 0 {}
              prop Name : string = "" {not observe}
              prop ThreadIds : observe IntWrapper^[] = null{}
              new( coreid: int, socketid: int, threadIds : observe IntWrapper^[])
              {
                CoreId = coreid;
                SocketId = socketid;
                ThreadIds = threadIds;
                Name = "";
              }
            }

            class HardwareTreeInternalProperty
            {
              prop Id : int= 0 {}
              prop Name : string = "" {not observe}
              new( id: int)
              {
                Id = id;
                Name = "";
              }

              new( id: int, name: string)
              {
                Id = id;
                Name = name;
              }
            }
          }
        }
      ]]>
    </Workflow>
  </Script>
</Resource>